The grammar for language X
This is the unsimplified grammar, it will need to be simplified before use.
===================================================================================================

###################
  Top Level Stuff
###################

CompilationUnit = epsilon
                | CompilationUnit PackageDeclaration
                | CompilationUnit ImportDeclaration
                | CompilationUnit TypeDefinition

PackageDeclaration = PackageKeyword QName SemiColon

ImportDeclaration  = ImportKeyword QName Semicolon
                   | ImportKeyword QName Dot Star Semicolon
                   | ImportKeyword StaticKeyword QName Semicolon
                   | ImportKeyword StaticKeyword QName Dot Star Semicolon

TypeDefinition = ClassDefinition
               | InterfaceDefinition
               | EnumDefinition

###############
  Class Stuff
###############


AccessSpecifier = PublicKeyword | PrivateKeyword | PackageKeyword | ProtectedKeyword
                | PackageKeyword ProtectedKeyword | ProtectedKeyword PackageKeyword
                | epsilon

Modifiers = Modifiers Modifier | epsilon
Modifier = StaticKeyword | AbstractKeyword | FinalKeyword | ImmutableKeyword | MutableKeyword
         | SynchronizedKeyword | NativeSpecifier | SinceSpecifier | TransientKeyword | VolatileKeyword
NativeSpecifier = NativeKeyword LParen StringLiteral RParen
SinceSpecifier = SinceKeyword LParen VersionNumber RParen
VersionNumber = IntegerLiteral | VersionNumber Dot IntegerLiteral

MemberHeader = AccessSpecifier Modifiers | AccessSpecifier | Modifiers | epsilon

TypeArgument = Name
             | Name ExtendsKeyword PointerType
             | Name SuperKeyword PointerType
             | Name ExtendsKeyword PointerType SuperKeyword PointerType
             | Name SuperKeyword PointerType ExtendsKeyword PointerType

TypeArgumentList = TypeArgumentList Comma TypeArgument | TypeArgument
TypeArguments = LAngle TypeArgumentList RAngle

ClassDefinition     = MemberHeader ClassKeyword Name ClassExtendsClause ImplementsClause LBrace MemberList RBrace
                    | MemberHeader ClassKeyword Name TypeArguments ClassExtendsClause ImplementsClause LBrace MemberList RBrace
InterfaceDefinition = MemberHeader InterfaceKeyword Name TypeArguments InterfaceExtendsClause LBrace MemberList RBrace

EnumDefinition = MemberHeader EnumKeyword Name ClassExtendsClause ImplementsClause LBrace EnumConstants Semicolon MemberList RBrace
               | MemberHeader EnumKeyword Name ClassExtendsClause ImplementsClause LBrace EnumConstants RBrace

EnumConstants = EnumConstantList Comma | EnumConstantList | epsilon
EnumConstantList = EnumConstantList Comma EnumConstant
                 | EnumConstant
EnumConstant = Name | Name Parameters

ClassExtendsClause     = ExtendsKeyword PointerType | epsilon
ImplementsClause       = ImplementsKeyword InterfaceList | epsilon
InterfaceExtendsClause = ExtendsKeyword InterfaceList | epsilon
InterfaceList          = InterfaceList Comma PointerType | PointerType

MemberList = MemberList Member | epsilon
Member = Constructor | Method | Field | StaticInitializer | TypeDefinition

Constructor = MemberHeader Name Arguments ThrowsClause Block

Method = MemberHeader TypeArguments Type Name Arguments ThrowsClause Semicolon
       | MemberHeader TypeArguments Type Name Arguments ThrowsClause Block
       | MemberHeader               Type Name Arguments ThrowsClause Semicolon
       | MemberHeader               Type Name Arguments ThrowsClause Block

ThrowsClause = ThrowsKeyword ThrowsList | epsilon
ThrowsList = PointerType | ThrowsList Comma PointerType

Field = MemberHeader Type AssigneeList Equals Expression Semicolon
      | MemberHeader Type AssigneeList Semicolon
AssigneeList = Assignee | AssigneeList Comma Assignee
Assignee = QName | Underscore

Property = MemberHeader PropertyKeyword Type Name Semicolon
         | MemberHeader PropertyKeyword Type Name AccessSpecifier AssignKeyword OptionalBlock Semicolon
         | MemberHeader PropertyKeyword Type Name AccessSpecifier RetrieveKeyword OptionalBlock Semicolon
         | MemberHeader PropertyKeyword Type Name AccessSpecifier AssignKeyword OptionalBlock AccessSpecifier RetrieveKeyword OptionalBlock Semicolon
         | MemberHeader PropertyKeyword Type Name AccessSpecifier RetrieveKeyword OptionalBlock AccessSpecifier AssignKeyword OptionalBlock Semicolon
         | MemberHeader PropertyKeyword Type Name Equals Expression Semicolon
         | MemberHeader PropertyKeyword Type Name Equals Expression AccessSpecifier AssignKeyword OptionalBlock Semicolon
         | MemberHeader PropertyKeyword Type Name Equals Expression AccessSpecifier RetrieveKeyword OptionalBlock Semicolon
         | MemberHeader PropertyKeyword Type Name Equals Expression AccessSpecifier AssignKeyword OptionalBlock AccessSpecifier RetrieveKeyword OptionalBlock Semicolon
         | MemberHeader PropertyKeyword Type Name Equals Expression AccessSpecifier RetrieveKeyword OptionalBlock AccessSpecifier AssignKeyword OptionalBlock Semicolon

OptionalBlock = Block | epsilon

// MemberHeader is used here instead of StaticKeyword to avoid shift-reduce conflicts with "static"
// for example: static {int -> void} foo;
// since this should normally shift with a static initializer and reduce to a MemberHeader for Field
StaticInitializer = MemberHeader Block

Arguments = LParen ArgumentList RParen | LParen RParen
ArgumentList = Argument | ArgumentList Comma Argument
Argument = Type Name
         | Type At Name Equals Expression
         | Arguments

Parameters = LParen ParameterList RParen
           | LParen RParen
ParameterList = Parameter | ParameterList Comma Parameter
Parameter = NormalParameter | DefaultParameter
DefaultParameter = At Name Equals Expression
NormalParameter = Expression


ArgList = LParen Args Comma DefaultArgs RParen
        | LParen Args RParen
        | LParen DefaultArgs RParen
        | LParen RParen
Args = Expression | Args Comma Expression
DefaultArgs = DefaultArg | DefaultArgs Comma DefaultArg
DefaultArg = At Name Equals Expression


#########################
  Blocks and Statements
#########################

Block = LBrace RBrace
      | LBrace Statements RBrace
Statements = Statements Statement | Statement

Statement = Block
          | Semicolon
          | ConstructorInvocationStatement
          | LocalDeclarationStatement
          | ExpressionStatement Semicolon
          | IfStatement
          | WhileStatement
          | DoStatement
          | ForStatement
          | SwitchStatement
          | BreakStatement
          | ContinueStatement
          | FallthroughStatement
          | ReturnStatement
          | SynchronizedStatement
          | ThrowStatement
          | TryStatement
          | IncrementStatement
          | DecrementStatement

// should only be used in constructors - check after parsing
ConstructorInvocationStatement = ThisKeyword ArgList Semicolon | SuperKeyword ArgList Semicolon

LocalDeclaration = Type VariableDeclarators
LocalDeclarationStatement = LocalDeclaration Semicolon

IfStatement = IfKeyword Expression Block
            | IfStatement ElseKeyword IfKeyword Expression Block
            | IfStatement ElseKeyword Block

WhileStatement = WhileKeyword Expression Block

DoStatement = DoKeyword Block WhileKeyword Expression Semicolon

ForStatement = ForKeyword LParen ForHeader RParen Block
             | ForKeyword ForHeader Block
ForHeader = LocalDeclaration Semicolon Expression Semicolon ForUpdate
          | LocalDeclaration Semicolon Expression Semicolon
          | LocalDeclaration Semicolon            Semicolon ForUpdate
          | LocalDeclaration Semicolon            Semicolon
          |                  Semicolon Expression Semicolon ForUpdate
          |                  Semicolon Expression Semicolon
          |                  Semicolon            Semicolon ForUpdate
          |                  Semicolon            Semicolon

ForUpdate = ExpressionStatement | IncrementExpression | DecrementExpression
          | ForUpdate Semicolon ExpressionStatement
          | ForUpdate Semicolon IncrementExpression
          | ForUpdate Semicolon DecrementExpression

SwitchStatement = SwitchKeyword Expression SwitchBlock
                | SwitchKeyword SwitchBlock
SwitchBlock = LBrace SwitchCases RBrace
            | LBrace RBrace
SwitchCases = SwitchCase | SwitchCases SwitchCase
SwitchCase = DefaultKeyword Colon Statements
           | CaseKeyword Expression Colon Statements

BreakStatement = BreakKeyword LParen IntegerLiteral RParen Semicolon
               | BreakKeyword Semicolon
ContinueStatement = ContinueKeyword LParen IntegerLiteral RParen Semicolon
                  | ContinueKeyword Semicolon
FallthroughStatement = FallthroughKeyword LParen IntegerLiteral RParen Semicolon
                     | FallthroughKeyword Semicolon

ReturnStatement = Return Expression Semicolon | Return Semicolon

SynchronizedStatement = SynchronizedKeyword Expression Block
                      | SynchronizedKeyword Block

ThrowStatement = ThrowKeyword Expression Semicolon

TryStatement = TryKeyword Block
             | TryStatement CatchKeyword CatchDeclaration Block
             | TryStatement FinallyKeyword Block
CatchDeclaration = LParen QName Name RParen
                 | QName Name

IncrementStatement = QName Plus Plus Semicolon   | Plus Plus QName Semicolon
DecrementStatement = QName Minus Minus Semicolon | Minus Minus QName Semicolon

###############
  Expressions
###############

Expression = 

Primary = PrimaryNoNewArray | ArrayInstanciationExpression

PrimaryNoNewArray = LParen Expression RParen
                  | IntegerLiteral | FloatingLiteral | CharacterLiteral | StringLiteral | NilLiteral
                  | FieldAccessExpression
                  | ExpressionStatement
                  | InstanciationExpression
                  | ArrayAccessExpression

ExpressionStatement = AssignExpression | MethodCallExpression
AssignExpression = QName AssignmentOperator Expression
MethodCallExpression = FieldAccessExpression Dot Name ArgList
                     | Name ArgList

// TODO: FieldAccessExpression very probably needs redoing, go over it and see what can be simplified
FieldAccessExpression = QName
                      | ThisKeyword
                      | QName Dot ThisKeyword
                      | SuperKeyword
                      | QName Dot SuperKeyword
                      | Primary Dot Name

InstanciationExpression = NewKeyword QName ArgList
                        | NewKeyword QName ArgList ClassBody

ArrayInstanciationExpression = NewKeyword QName DimensionExpressions Dimensions ArrayInitializer
                             | NewKeyword QName DimensionExpressions ArrayInitializer
                             | NewKeyword QName Dimensions ArrayInitializer
                             | NewKeyword QName DimensionExpressions Dimensions
                             | NewKeyword QName DimensionExpressions

DimensionExpressions = DimensionExpression | DimensionExpressions DimensionExpression
DimensionExpression = LSquare Expression RSquare

Dimensions = LSquare RSquare | Dimensions LSquare RSquare

ArrayAccessExpression = PrimaryNoNewArray DimensionExpressions

AssignmentOperator = Equals | PlusEquals | MinusEquals | TimesEquals | DivideEquals | ModEquals
                   | BooleanAndEquals | BooleanOrEquals | BitwiseAndEquals | BitwiseOrEquals | BitwiseXorEquals
                   | LeftShiftEquals | ArithmeticRightShiftEquals | LogicalRightShiftEquals

ComparisonOperator = EqualsEquals | NotEquals | RAngle | LAngle | MoreThanEquals | LessThanEquals


#########
  Types
#########

Type = PrimitiveType | PointerType | ArrayType | TupleType | VoidType

TupleType = LParen TypeList RParen
TypeList = Type | TypeList Comma Type

ClosureType = LBrace TypeList Arrow TypeList ThrowsClause RBrace

ArrayType = Type LSquare RSquare

PrimitiveType = BooleanType | IntegerType | CharacterType | FloatingType
BooleanType = BooleanKeyword
IntegerType = SignedKeyword IntegerLength | UnsignedKeyword IntegerLength | IntegerLength
CharacterType = CharacterKeyword
FloatingType = SignedKeyword FloatLength | UnsignedKeyword FloatLength | FloatLength
IntegerLength = ByteKeyword | ShortKeyword | IntKeyword | LongKeyword
FloatingLength = FloatKeyword | DoubleKeyword

PointerType = QName | Hash QName | QName TypeParameters | Hash QName TypeParameters
TypeParameters = LAngle TypeParameterList RAngle
TypeParameterList = TypeParameter | TypeParameterList Comma TypeParameter
TypeParameter = NormalTypeParameter | WildcardTypeParameter
NormalTypeParameter = Type
WildcardTypeParameter = QuestionMark ExtendsKeyword PointerType SuperKeyword PointerType
                      | QuestionMark SuperKeyword PointerType ExtendsKeyword PointerType
                      | QuestionMark ExtendsKeyword PointerType
                      | QuestionMark SuperKeyword PointerType

VoidType = VoidKeyword

QName = Name | QName Dot Name
CommaSeparatedQNameList = QName | CommaSeparatedQNameList Comma QName


################################
  Primitive Tokens (Terminals)
################################

Name

IntegerLiteral
FloatingLiteral
CharacterLiteral
StringLiteral
NilLiteral

PackageKeyword
ImportKeyword
ClassKeyword
ExtendsKeyword
ImplementsKeyword
PublicKeyword
PrivateKeyword
ProtectedKeyword
AbstractKeyword
StaticKeyword
FinalKeyword
VoidKeyword
NativeKeyword

LParen
RParen
Semicolon
Dot
Star
LBrace
RBrace
Comma
At
Equals
LSquare
RSquare
