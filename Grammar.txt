The grammar for language X
This is the unsimplified grammar, it will need to be simplified before use.
===================================================================================================

###################
  Top Level Stuff
###################

CompilationUnit = PackageDeclaration ImportDeclarations TypeDefinitions

PackageDeclaration = PackageKeyword QName SemiColon | epsilon

ImportDeclarations = ImportDeclarations ImportDeclaration
                   | epsilon
ImportDeclaration  = ImportKeyword QName Semicolon
                   | ImportKeyword QName Dot Star Semicolon
                   | ImportKeyword StaticKeyword QName Semicolon
                   | ImportKeyword StaticKeyword QName Dot Star Semicolon

TypeDefinitions = TypeDefinitions TypeDefinition | epsilon
TypeDefinition = ClassDefinition
               | InterfaceDefinition
               | EnumDefinition

###############
  Class Stuff
###############


AccessSpecifier = PublicKeyword | PrivateKeyword | PackageKeyword | ProtectedKeyword
                | PackageKeyword ProtectedKeyword | ProtectedKeyword PackageKeyword

Modifiers = Modifiers Modifier | epsilon
Modifier = StaticKeyword | AbstractKeyword | FinalKeyword | SynchronizedKeyword
         | NativeSpecification | TransientKeyword | VolatileKeyword
NativeSpecification = NativeKeyword LParen StringLiteral RParen

ClassDefinition = AccessSpecifier Modifiers ClassKeyword Name ClassRest
                | AccessSpecifier ClassKeyword Name ClassRest
                | Modifiers ClassKeyword Name ClassRest
                | ClassKeyword Name ClassRest
ClassRest = ExtendsKeyword QName ClassBody
          | ImplementsKeyword CommaSeparatedQNameList ClassBody
          | ExtendsKeyword QName ImplementsKeyword CommaSeparatedQNameList ClassBody
          | ClassBody
ClassBody = LBrace RBrace
          | LBrace ClassMemberList RBrace

ClassMemberList = ConstructorDefinition | MethodDefinition | MemberVariableDefinition | StaticInitializer | TypeDefinition
                | ClassMemberList ConstructorDefinition
                | ClassMemberList MethodDefinition
                | ClassMemberList MemberVariableDefinition
                | ClassMemberList StaticInitializer
                | ClassMemberList TypeDefinition

ConstructorDefinition = AccessSpecifier Modifiers Name ParameterList ConstructorRest
                      | Modifiers Name ParameterList ConstructorRest
                      | AccessSpecifier Name ParameterList ConstructorRest
                      | Name ParameterList ConstructorRest
ConstructorRest = Block | ThrowsClause Block

MethodDefinition = AccessSpecifier Modifiers ReturnType Name ParameterList MethodRest
                 | AccessSpecifier ReturnType Name ParameterList MethodRest
                 | Modifiers ReturnType Name ParameterList MethodRest
                 | ReturnType Name ParameterList MethodRest
MethodRest = Semicolon
           | Block
           | ThrowsClause Semicolon
           | ThrowsClause Block
ThrowsClause = ThrowsKeyword CommaSeparatedQNameList

MemberVariableDefinition = AccessSpecifier Modifiers Type VariableDeclarators Semicolon
                         | Modifiers Type VariableDeclarators Semicolon
                         | AccessSpecifier Type VariableDeclarators Semicolon
                         | Type VariableDeclarators Semicolon

VariableDeclarators = VariableDeclarators Comma VariableDeclarator | VariableDeclarator
VariableDeclarator  = Name Equals Expression | Name Equals ArrayInitializer

ArrayInitializer = LBrace ArrayInitList RBrace | LBrace RBrace
ArrayInitList = Expression | ArrayInitList Comma Expression

StaticInitializer = StaticKeyword Block

ParameterList = LParen Params Comma DefaultParams RParen
              | LParen Params RParen
              | LParen DefaultParams RParen
              | LParen RParen
Params = Param | Params Comma Param
Param  = Type Name
DefaultParams = DefaultParams Comma DefaultParam | DefaultParam
DefaultParam  = Type At Name Equals Expression

ArgList = LParen Args Comma DefaultArgs RParen
        | LParen Args RParen
        | LParen DefaultArgs RParen
        | LParen RParen
Args = Expression | Args Comma Expression
DefaultArgs = DefaultArg | DefaultArgs Comma DefaultArg
DefaultArg = At Name Equals Expression


#########################
  Blocks and Statements
#########################

Block = LBrace RBrace
      | LBrace Statements RBrace
Statements = Statements Statement | Statement

Statement = Block
          | Semicolon
          | ConstructorInvocationStatement
          | LocalDeclarationStatement
          | ExpressionStatement Semicolon
          | IfStatement
          | WhileStatement
          | DoStatement
          | ForStatement
          | SwitchStatement
          | BreakStatement
          | ContinueStatement
          | FallthroughStatement
          | ReturnStatement
          | SynchronizedStatement
          | ThrowStatement
          | TryStatement
          | IncrementStatement
          | DecrementStatement

// should only be used in constructors - check after parsing
ConstructorInvocationStatement = ThisKeyword ArgList Semicolon | SuperKeyword ArgList Semicolon

LocalDeclaration = Type VariableDeclarators
LocalDeclarationStatement = LocalDeclaration Semicolon

IfStatement = IfKeyword Expression Block
            | IfStatement ElseKeyword IfKeyword Expression Block
            | IfStatement ElseKeyword Block

WhileStatement = WhileKeyword Expression Block

DoStatement = DoKeyword Block WhileKeyword Expression Semicolon

ForStatement = ForKeyword LParen ForHeader RParen Block
             | ForKeyword ForHeader Block
ForHeader = LocalDeclaration Semicolon Expression Semicolon ForUpdate
          | LocalDeclaration Semicolon Expression Semicolon
          | LocalDeclaration Semicolon            Semicolon ForUpdate
          | LocalDeclaration Semicolon            Semicolon
          |                  Semicolon Expression Semicolon ForUpdate
          |                  Semicolon Expression Semicolon
          |                  Semicolon            Semicolon ForUpdate
          |                  Semicolon            Semicolon

ForUpdate = ExpressionStatement | IncrementExpression | DecrementExpression
          | ForUpdate Semicolon ExpressionStatement
          | ForUpdate Semicolon IncrementExpression
          | ForUpdate Semicolon DecrementExpression

SwitchStatement = SwitchKeyword Expression SwitchBlock
                | SwitchKeyword SwitchBlock
SwitchBlock = LBrace SwitchCases RBrace
            | LBrace RBrace
SwitchCases = SwitchCase | SwitchCases SwitchCase
SwitchCase = DefaultKeyword Colon Statements
           | CaseKeyword Expression Colon Statements

BreakStatement = BreakKeyword LParen IntegerLiteral RParen Semicolon
               | BreakKeyword Semicolon
ContinueStatement = ContinueKeyword LParen IntegerLiteral RParen Semicolon
                  | ContinueKeyword Semicolon
FallthroughStatement = FallthroughKeyword LParen IntegerLiteral RParen Semicolon
                     | FallthroughKeyword Semicolon

ReturnStatement = Return Expression Semicolon | Return Semicolon

SynchronizedStatement = SynchronizedKeyword Expression Block
                      | SynchronizedKeyword Block

ThrowStatement = ThrowKeyword Expression Semicolon

TryStatement = TryKeyword Block
             | TryStatement CatchKeyword CatchDeclaration Block
             | TryStatement FinallyKeyword Block
CatchDeclaration = LParen QName Name RParen
                 | QName Name

IncrementStatement = QName Plus Plus Semicolon   | Plus Plus QName Semicolon
DecrementStatement = QName Minus Minus Semicolon | Minus Minus QName Semicolon

###############
  Expressions
###############

Expression = 

Primary = PrimaryNoNewArray | ArrayInstanciationExpression

PrimaryNoNewArray = LParen Expression RParen
                  | IntegerLiteral | FloatingLiteral | CharacterLiteral | StringLiteral | NilLiteral
                  | FieldAccessExpression
                  | ExpressionStatement
                  | InstanciationExpression
                  | ArrayAccessExpression

ExpressionStatement = AssignExpression | MethodCallExpression
AssignExpression = QName AssignmentOperator Expression
MethodCallExpression = FieldAccessExpression Dot Name ArgList
                     | Name ArgList

// TODO: FieldAccessExpression very probably needs redoing, go over it and see what can be simplified
FieldAccessExpression = QName
                      | ThisKeyword
                      | QName Dot ThisKeyword
                      | SuperKeyword
                      | QName Dot SuperKeyword
                      | Primary Dot Name

InstanciationExpression = NewKeyword QName ArgList
                        | NewKeyword QName ArgList ClassBody

ArrayInstanciationExpression = NewKeyword QName DimensionExpressions Dimensions ArrayInitializer
                             | NewKeyword QName DimensionExpressions ArrayInitializer
                             | NewKeyword QName Dimensions ArrayInitializer
                             | NewKeyword QName DimensionExpressions Dimensions
                             | NewKeyword QName DimensionExpressions

DimensionExpressions = DimensionExpression | DimensionExpressions DimensionExpression
DimensionExpression = LSquare Expression RSquare

Dimensions = LSquare RSquare | Dimensions LSquare RSquare

ArrayAccessExpression = PrimaryNoNewArray DimensionExpressions

AssignmentOperator = Equals | PlusEquals | MinusEquals | TimesEquals | DivideEquals | ModEquals
                   | BooleanAndEquals | BooleanOrEquals | BitwiseAndEquals | BitwiseOrEquals | BitwiseXorEquals
                   | LeftShiftEquals | ArithmeticRightShiftEquals | LogicalRightShiftEquals

ComparisonOperator = EqualsEquals | NotEquals | RAngle | LAngle | MoreThanEquals | LessThanEquals


#########
  Types
#########

ReturnType = Type | VoidKeyword
Type = PrimitiveType | ReferenceType | ArrayType
ArrayType = Type LSquare RSquare
PrimitiveType = // TODO: remember to include tuples
ReferenceType = // TODO: remember to include immutability

QName = Name | QName Dot Name
CommaSeparatedQNameList = QName | CommaSeparatedQNameList Comma QName


################################
  Primitive Tokens (Terminals)
################################

Name

IntegerLiteral
FloatingLiteral
CharacterLiteral
StringLiteral
NilLiteral

PackageKeyword
ImportKeyword
ClassKeyword
ExtendsKeyword
ImplementsKeyword
PublicKeyword
PrivateKeyword
ProtectedKeyword
AbstractKeyword
StaticKeyword
FinalKeyword
VoidKeyword
NativeKeyword

LParen
RParen
Semicolon
Dot
Star
LBrace
RBrace
Comma
At
Equals
LSquare
RSquare
