The grammar for language X,
this must be simplified before use, to make sure that there are
not multiple types that can be generated by exactly the same rule.
===================================================================================================

CompilationUnit = PackageDeclaration ImportDeclarations TopLevelTypeDefinitions
                | PackageDeclaration ImportDeclarations
                | PackageDeclaration TopLevelTypeDefinitions
                | ImportDeclarations TopLevelTypeDefinitions
                | PackageDeclaration
                | ImportDeclarations
                | TopLevelTypeDefinitions
                | EMPTY_TYPE

PackageDeclaration = PackageKeyword TypeQualifier SemiColon

ImportDeclarations = ImportDeclarations ImportDeclaration
                   | ImportDeclaration
ImportDeclaration  = ImportKeyword TypeQualifier Dot ReferenceTypeName Semicolon
                   | ImportKeyword TypeQualifier Dot Star Semicolon
                   | ImportKeyword TypeQualifier Dot ReferenceTypeName Dot MethodName Semicolon
                   | ImportKeyword TypeQualifier Dot ReferenceTypeName Dot Star Semicolon
                   | ImportKeyword ReferenceTypeName Dot MethodName Semicolon
                   | ImportKeyword ReferenceTypeName Dot Star Semicolon

TopLevelTypeDefinitions = TopLevelTypeDefinitions TopLevelTypeDefinition
                        | TopLevelTypeDefinition
TopLevelTypeDefinition = ClassDefinition
                       | InterfaceDefinition
                       | EnumDefinition

InterfaceList = InterfaceList Comma ReferenceType | ReferenceType

ClassDefinition = AccessSpecifier Modifiers ClassKeyword ReferenceTypeName ClassRest
                | AccessSpecifier ClassKeyword ReferenceTypeName ClassRest
                | Modifiers ClassKeyword ReferenceTypeName ClassRest
                | ClassKeyword ReferenceTypeName ClassRest
ClassRest = ExtendsKeyword ReferenceType ClassBody
          | ImplementsKeyword InterfaceList ClassBody
          | ExtendsKeyword QualifiedClassName ImplementsKeyword InterfaceList ClassBody
          | ClassBody
ClassBody = LBrace RBrace
          | LBrace ClassMemberList RBrace

InterfaceDefinition = AccessSpecifier Modifiers InterfaceKeyword ReferenceTypeName InterfaceRest
                    | Modifiers InterfaceKeyword ReferenceTypeName InterfaceRest
                    | AccessSpecifier InterfaceKeyword ReferenceTypeName InterfaceRest
                    | InterfaceKeyword ReferenceTypeName InterfaceRest
InterfaceRest = ExtendsKeyword InterfaceList InterfaceBody
              | InterfaceBody
InterfaceBody = LBrace RBrace
              | LBrace ClassMemberList RBrace

EnumDefinition = AccessSpecifier Modifiers EnumKeyword ReferenceTypeName EnumBody
               | Modifiers EnumKeyword ReferenceTypeName EnumBody
               | AccessSpecifier EnumKeyword ReferenceTypeName EnumBody
               | EnumKeyword ReferenceTypeName EnumBody
EnumBody = LBrace RBrace
         | LBrace EnumConstantList RBrace
         | LBrace Semicolon RBrace
         | LBrace EnumConstantList Semicolon RBrace
         | LBrace Semicolon ClassMemberList RBrace
         | LBrace EnumConstantList Semicolon ClassMemberList RBrace

EnumConstantList = EnumConstantList Comma EnumConstantDefinition | EnumConstantDefinition
EnumConstantDefinition = VariableName | VariableName FunctionArguments

AccessSpecifier = PublicKeyword | PrivateKeyword | PackageKeyword | ProtectedKeyword
                | PackageKeyword ProtectedKeyword | ProtectedKeyword PackageKeyword
Modifiers = Modifiers Modifier | Modifier
Modifier  = StaticKeyword | AbstractKeyword | FinalKeyword | SynchronizedKeyword | NativeSpecification | TransientKeyword | VolatileKeyword

NativeSpecification = NativeKeyword LParen StringLiteral RParen

ClassMemberList = MethodDefinition | MemberVariableDefinition | StaticInitializer
                | ClassMemberList MethodDefinition
                | ClassMemberList MemberVariableDefinition
                | ClassMemberList StaticInitializer

MethodDefinition = AccessSpecifier Modifiers ReturnType MethodName ParameterList MethodRest
                 | AccessSpecifier ReturnType MethodName ParameterList MethodRest
                 | Modifiers ReturnType MethodName ParameterList MethodRest
                 | ReturnType MethodName ParameterList MethodRest
MethodRest = Semicolon
           | Block
           | ThrowsClause Semicolon
           | ThrowsClause Block
ThrowsClause = ThrowsKeyword ExceptionList
ExceptionList = ExceptionList Comma ReferenceTypeName | ReferenceTypeName

MemberVariableDefinition = AccessSpecifier Modifiers Type VariableDeclarators Semicolon
                         | Modifiers Type VariableDeclarators Semicolon
                         | AccessSpecifier Type VariableDeclarators Semicolon
                         | Type VariableDeclarators Semicolon

VariableDeclarators = VariableDeclarators Comma VariableDeclarator | VariableDeclarator
VariableDeclarator  = VariableName Equals Expression

StaticInitializer = StaticKeyword Block

ParameterList = LParen Params Comma DefaultParams RParam
              | LParen Params RParem
              | LParen DefaultParams RParen
              | LParen RParen
Params = Params Comma Param | Param
Param  = Type VariableName
DefaultParams = DefaultParams Comma DefaultParam | DefaultParam
DefaultParam  = Type At VariableName Equals Expression

Block = LBrace RBrace
      | LBrace Statements RBrace
Statements = Statements Statement | Statement

Statement = IfStatement | WhileStatement | DoWhileStatement |

StatementExpression = FunctionCallExpression | AssignmentExpression




// TODO: add immutability - remember that ReferenceType is used in "extends ReferenceType implements ReferenceType, ReferenceType" clauses,
//       so it should go at a higher level than that. Maybe an ImmutableType?

ReturnType = Type | VoidKeyword
Type = PrimitiveType | ReferenceType | ArrayType
ArrayType = Type LSquare RSquare
PrimitiveType = // TODO: remember to include tuples
ReferenceType = // TODO: remember to include qualified type names

QualifiedClassName = TypeQualifier Dot ReferenceTypeName

TypeQualifier = TypeQualifier Dot PackageName
              | PackageName

ReferenceTypeName = UpperCaseIdentifier
PackageName       = LowerCaseIdentifier
VariableName      = LowerCaseIdentifier
MethodName        = LowerCaseIdentifier

// a list of types that do not have rules, but are generated by the tokenizer

LowerCaseIdentifier
UpperCaseIdentifier

IntegerLiteral
FloatingLiteral
CharacterLiteral
StringLiteral
NilLiteral

PackageKeyword
ImportKeyword
ClassKeyword
ExtendsKeyword
ImplementsKeyword
PublicKeyword
PrivateKeyword
ProtectedKeyword
AbstractKeyword
StaticKeyword
FinalKeyword
VoidKeyword
NativeKeyword

LParen
RParen
Semicolon
Dot
Star
LBrace
RBrace
Comma
At
Equals
LSquare
RSquare
