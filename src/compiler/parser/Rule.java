package compiler.parser;

/*
 * Created on 6 Apr 2010
 */

/**
 * A Rule is the basic unit of matching in the parser.
 * The parser condenses lists of input tokens into tokens using rules.
 * 
 * @author Anthony Bryant
 * 
 */
public abstract class Rule
{
  private Object type;
  private Object[][] requirementTypeLists;
  
  /**
   * Creates a new rule with the specified type and possible requirement lists.
   * @param type - the type that this rule reduces to
   * @param requirementTypeLists - the lists of requirement types that can reduce via this rule
   */
  public Rule(Object type, Object[]... requirementTypeLists)
  {
    this.type = type;
    this.requirementTypeLists = requirementTypeLists;
  }
  
  /**
   * @return the type that this rule will reduce to
   */
  public final Object getType()
  {
    return type;
  }
  
  /**
   * @return the lists of requirement types that this rule can be used to reduce
   */
  public final Object[][] getRequirementTypeLists()
  {
    return requirementTypeLists;
  }
  
  /**
   * Matches a list of values that have the types associated with one of this rule's requirement lists.
   * The <code>args</code> array will contain exactly the same number of elements as one of the requirement type lists,
   * and each element of <code>args</code> will be generated by either the tokenizer or the match method of a rule with
   * the type of the corresponding element in the requirement type list.
   * @param args - the arguments list, which will have length and types corresponding to one of the requirement type lists
   * @return the resulting value object
   */
  public abstract Object match(Object[] args);
  
}
